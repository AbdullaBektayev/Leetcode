https://leetcode.com/problems/sudoku-solver/

class Solution {
    bool row[9][9];
    bool col[9][9];
    bool cell[3][3][9];
    vector<vector<char>> res;
    
    void solve(int i, int j, vector<vector<char>>& board){
        if(i == 9){
            res = board;
            return;
        }
        if(board[i][j] == '.'){
            for(int k = 0; k < 9; k++){
                if(!row[i][k] && !col[j][k] && !cell[i/3][j/3][k]){
                    row[i][k] = col[j][k] = cell[i/3][j/3][k] = true;
                    board[i][j] = k + '1';
                    solve(i + (j + 1)/9, (j+1)%9, board);
                    board[i][j] = '.';
                    row[i][k] = col[j][k] = cell[i/3][j/3][k] = false;
                }
            }
        }
        else{
            solve(i + (j + 1)/9, (j+1)%9, board);
        }
    }
    
public:
    void solveSudoku(vector<vector<char>>& board) {
        for(int i = 0; i < 9; i++){
            for(int j = 0; j < 9; j++){
                if(board[i][j] != '.'){
                    int idx = board[i][j] - '1';
                    row[i][idx] = col[j][idx] = cell[i/3][j/3][idx] = true;
                }
            }
        }
        
        solve(0,0,board);
        board = res;
    }
};