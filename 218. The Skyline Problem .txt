https://leetcode.com/problems/the-skyline-problem/

class Solution {
public:
    vector<vector<int>> getSkyline(vector<vector<int>>& buildings) {
        vector<vector<int>> res;
        if(buildings.size() == 0)
            return res;
        int oldMax = 0, newMax = 0;
        pair<int,int> p[buildings.size()*2];
        int idx = 0;
        for(vector<int> v : buildings){
            p[idx].first = v[0];
            p[idx++].second = -v[2];
            p[idx].first = v[1];
            p[idx++].second = v[2];
        }
        sort(p,p + idx);
        multiset<int> s;
        s.insert(0);
        for(int i = 0; i < idx; i++){
            if(p[i].second > 0)
                s.erase(s.find(p[i].second));
            else
                s.insert(-p[i].second);
            newMax = *s.rbegin();
            if(newMax != oldMax){
                res.push_back({p[i].first,newMax});
                oldMax = newMax;
            }
        }
        return res;
    }
};