https://leetcode.com/problems/shortest-unsorted-continuous-subarray/

class Solution {
public:
    int findUnsortedSubarray(vector<int>& nums) {
        int min_val = numeric_limits<int>::max();
		int max_val = numeric_limits<int>::min();
		bool found = false;
		for (int i = 0; i < nums.size() - 1; ++i)
		{
			if (nums[i] > nums[i + 1])
			{
				min_val = min(min_val, nums[i + 1]);
				max_val = max(max_val, nums[i]);
				found = true;
			}
		}

		if (!found)
		{
			return 0;
		}

		int fidx = 0;
		for (int i = 0; i < nums.size() - 1; ++i)
		{
			if (nums[i] > min_val)
			{
				fidx = i;
				break;
			}
		}

		int ridx = nums.size() - 1;
		for (int i = nums.size() - 1; i > 0; --i)
		{
			if (nums[i] < max_val)
			{
				ridx = i;
				break;
			}
		}
		return ridx - fidx + 1;
    }
};