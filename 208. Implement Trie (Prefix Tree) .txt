https://leetcode.com/problems/implement-trie-prefix-tree/

class Trie {
public:
    /** Initialize your data structure here. */
    struct TreeNode{
        TreeNode* word[26];
        bool ch = false;
    };
    TreeNode* main = new TreeNode();
    Trie() {
        
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        TreeNode* cur = main;
        for(int i = 0; i < word.size(); i++){
            int in = word[i] - 'a';
            if(!cur->word[in]){
                cur->word[in] = new TreeNode();
            }
            cur = cur->word[in];
        }
        cur->ch = true;
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        TreeNode* cur = main;
        for(int i = 0; i < word.size(); i++){
            int in = word[i] - 'a';
            if(!cur->word[in]){return false;}
            cur = cur->word[in];
        }
        if(cur->ch){return true;}
        return false;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        TreeNode* cur = main;
        for(int i = 0; i < prefix.size(); i++){
            int in = prefix[i] - 'a';
            if(!cur->word[in]){return false;}
            cur = cur->word[in];
        }
        return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */