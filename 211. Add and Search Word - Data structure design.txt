https://leetcode.com/problems/add-and-search-word-data-structure-design/



class WordDictionary {
public:
    struct Trie{
        Trie* data[26];
        bool word = false;
    };
    Trie* head = new Trie();
    /** Initialize your data structure here. */
    WordDictionary() {
        
    }
    
    /** Adds a word into the data structure. */
    void addWord(string word) {
        Trie* cur= head;
        for(char w : word){
            int in  = w - 'a';
            if(!cur->data[in]){cur->data[in] = new Trie();}
            cur = cur->data[in];
        }
        cur->word = true;
    }
    
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    bool search(string word) {
        queue<Trie*> q;
        Trie* cur;
        q.push(head);
        int ind = 0; 
        while(!q.empty()){
            int size = q.size();
            for(int i = 0; i < size; i++){
                cur = q.front();
                q.pop();
                if(word[ind] == '.'){
                    for(int j = 0; j < 26; j++)
                        if(cur->data[j])
                            q.push(cur->data[j]);
                            
                    continue;
                }
                int idx = word[ind] - 'a';
                if(cur->data[idx]){q.push(cur->data[idx]);}
            }
            ind++;
            if(ind == word.length()){
                while(!q.empty()){
                    if(q.front()->word){return true;}
                    q.pop();
                }
                return false;
            }
        }
        
        return false;
    }
};

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary* obj = new WordDictionary();
 * obj->addWord(word);
 * bool param_2 = obj->search(word);
 */