https://leetcode.com/problems/diagonal-traverse/


class Solution {
private:
    pair<int,int> prev(vector<vector<int>>& mat, vector<int>& res,int i,int j){
        if(i < mat.size() && j >= 0 && i >= 0 && j < mat[0].size() ){
            res.push_back(mat[i][j]);
            return prev(mat,res,i+1,j-1);
        }
        return {i-1,j+1};
    }
    
    pair<int,int> next(vector<vector<int>>& mat, vector<int>& res,int i,int j){
        if(i >= 0 && j < mat[0].size() && i < mat.size() && j >= 0){
            res.push_back(mat[i][j]);
            return next(mat,res,i-1,j+1);
        }
        return {i+1,j-1};
    }
public:
    vector<int> findDiagonalOrder(vector<vector<int>>& matrix) {
        vector<int> res;
        if(matrix.size() == 0){
            return res;
        }
        int i = 0;
        int j = 0;
        int half = 1;
        pair<int,int> p;
        res.push_back(matrix[i][j]);
        while(i != matrix.size() || j != matrix[0].size()){
            if(j == matrix[0].size()){
                j--;
                //cout << i << "  " <<j;
            }
            else{j++;}
            p = prev(matrix,res,i,j);
            i = p.first;
            j = p.second;
            if(i == matrix.size() && j == matrix[0].size()){break;}
            if(i == matrix.size()){
                i--;
            }
            else{ i++;}
            p = next(matrix,res,i,j);
            i = p.first;
            j = p.second;
        }
        return res;
    }
};