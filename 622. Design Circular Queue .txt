https://leetcode.com/problems/design-circular-queue/


class MyCircularQueue {
public:
    /** Initialize your data structure here. Set the size of the queue to be k. */
    vector<int> vec;
    int size = 0;
    int head = 0;
    int tail = 0;
    int keyS = 0;
    MyCircularQueue(int k) {
        vec.resize(k);
        keyS = k;
    }
    
    /** Insert an element into the circular queue. Return true if the operation is successful. */
    bool enQueue(int value) {
        if(size < vec.size()){
            vec[tail%keyS] = value;
            tail++;
            size++;
            return true;
        }
        return false;
    }
    
    /** Delete an element from the circular queue. Return true if the operation is successful. */
    bool deQueue() {
        if(size){
            head++;
            size--;
            return true;
        }
        return false;
    }
    
    /** Get the front item from the queue. */
    int Front() {
        if(size){return vec[head%keyS];}
        return -1;
    }
    
    /** Get the last item from the queue. */
    int Rear() {
        if(size){return vec[(tail-1)%keyS];}
        return -1;
    }
    
    /** Checks whether the circular queue is empty or not. */
    bool isEmpty() {
        if(size == 0){return true;}
        return false;
    }
    
    /** Checks whether the circular queue is full or not. */
    bool isFull() {
        if(size == keyS){return true;}
        return false;
    }
};

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue* obj = new MyCircularQueue(k);
 * bool param_1 = obj->enQueue(value);
 * bool param_2 = obj->deQueue();
 * int param_3 = obj->Front();
 * int param_4 = obj->Rear();
 * bool param_5 = obj->isEmpty();
 * bool param_6 = obj->isFull();
 */